{"componentChunkName":"component---src-templates-blog-post-js","path":"/add-radial-impulse-to-actor/","result":{"data":{"site":{"siteMetadata":{"title":"Unreal C++"}},"markdownRemark":{"id":"deaeda94-fa76-5293-8f21-379da4645c28","excerpt":"Github Link: https://github.com/Harrison1/unrealcpp/tree/master/AddRadialForce For this tutorial we are using the standard first person C++ template withâ€¦","html":"<p><strong>Github Link: <a href=\"https://github.com/Harrison1/unrealcpp/tree/master/AddRadialForce\">https://github.com/Harrison1/unrealcpp/tree/master/AddRadialForce</a></strong></p>\n<p><em>For this tutorial we are using the standard first person C++ template with starter content. If you don't know how to add a new actor class to your project, please visit the <a href=\"/add-actor-class\">Add C++ Actor Class</a> post.</em></p>\n<p>This tutorial is super fun, we are going to simulate a explosion by adding radial impulse to all objects within a set range.</p>\n<p>Create a new actor called <code>AddRadialForce</code>. We don't have to do anything to the header file. Below is the default header file generated by Unreal.</p>\n<h3>AddRadialForce.h</h3>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"CoreMinimal.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"GameFramework/Actor.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"AddRadialForce.generated.h\"</span></span>\n\n<span class=\"token function\">UCLASS</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UNREALCPP_API</span> AAddRadialForce <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> AActor\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">GENERATED_BODY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\t\n\t<span class=\"token comment\">// Sets default values for this actor's properties</span>\n\t<span class=\"token function\">AAddRadialForce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\">// Called when the game starts or when spawned</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">BeginPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">override</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\t\n\t<span class=\"token comment\">// Called every frame</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Tick</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> DeltaTime<span class=\"token punctuation\">)</span> <span class=\"token keyword\">override</span><span class=\"token punctuation\">;</span>\n\t\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>To help us during the debugging process, let's add the <code>DrawDebugHelpers</code> script to our code.</p>\n<h4>include DrawDebugHelpers.h</h4>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"AddRadialForce.h\"</span></span>\n<span class=\"token comment\">// add debug helpfers</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"DrawDebugHelpers.h\"</span></span></code></pre></div>\n<p>In this example we are going to perform all of our logic inside the <code>BeginPlay()</code> function. We want to collect all the hit results that are within our range and get the results from our range's sweep. To do this we are going to use <a href=\"https://docs.unrealengine.com/latest/INT/Programming/UnrealArchitecture/TArrays/\">TArrays</a> track our overlapping actors.</p>\n<h4>add hit result and sweep actors TArrays</h4>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token class-name\">AAddRadialForce</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">BeginPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">Super</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">BeginPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// create tarray for hit results</span>\n\tTArray<span class=\"token operator\">&lt;</span>FHitResult<span class=\"token operator\">></span> OutHits<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// crate tarray for sweep actors</span>\n\tTArray<span class=\"token operator\">&lt;</span>AActor<span class=\"token operator\">*</span><span class=\"token operator\">></span> SweepActors<span class=\"token punctuation\">;</span>\n\t\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Next we're going to declare our <code>OutHits</code> TArray. We want the sweep range to start and end at this actor's position and have the <code>CollisionShape</code> be a sphere of 500 units. You get the actor's location by using <code>GetActorLocation()</code> which returns a vector. We create a <code>CollisionShape</code> by using <code>FCollisionShape::MakeSphere(500.0f)</code> which returns a <code>FCollisionShape</code>.</p>\n<h4>add sweep variables and shape</h4>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// Called when the game starts or when spawned</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">AAddRadialForce</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">BeginPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">Super</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">BeginPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// create tarray for hit results</span>\n\tTArray<span class=\"token operator\">&lt;</span>FHitResult<span class=\"token operator\">></span> OutHits<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// get actor locations</span>\n\tFVector MyLocation <span class=\"token operator\">=</span> <span class=\"token function\">GetActorLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\">// start and end locations. The sphere will create the radial sweep.</span>\n\tFVector Start <span class=\"token operator\">=</span> MyLocation<span class=\"token punctuation\">;</span>\n\tFVector End <span class=\"token operator\">=</span> MyLocation<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// create a collision sphere</span>\n\tFCollisionShape MyColSphere <span class=\"token operator\">=</span> <span class=\"token class-name\">FCollisionShape</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">MakeSphere</span><span class=\"token punctuation\">(</span><span class=\"token number\">500.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To visualize the sphere of the sweep we will draw a debug sphere.</p>\n<h4>DrawDebugSphere</h4>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// Called when the game starts or when spawned</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">AAddRadialForce</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">BeginPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">Super</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">BeginPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// create tarray for hit results</span>\n\tTArray<span class=\"token operator\">&lt;</span>FHitResult<span class=\"token operator\">></span> OutHits<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// get actor locations</span>\n\tFVector MyLocation <span class=\"token operator\">=</span> <span class=\"token function\">GetActorLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\">// start and end locations. The sphere will create the radial sweep.</span>\n\tFVector Start <span class=\"token operator\">=</span> MyLocation<span class=\"token punctuation\">;</span>\n\tFVector End <span class=\"token operator\">=</span> MyLocation<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// create a collision sphere</span>\n\tFCollisionShape MyColSphere <span class=\"token operator\">=</span> <span class=\"token class-name\">FCollisionShape</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">MakeSphere</span><span class=\"token punctuation\">(</span><span class=\"token number\">500.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// draw collision sphere</span>\n    <span class=\"token function\">DrawDebugSphere</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">GetActorLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> MyColSphere<span class=\"token punctuation\">.</span><span class=\"token function\">GetSphereRadius</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> FColor<span class=\"token double-colon punctuation\">::</span>Cyan<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Next we have to check if our actor hits anything when we <code>BeginPlay()</code>. Every actor has the <code>GetWorld</code> function. From the <code>GetWorld()</code> function we will <code>SweepMultiByChannel</code> and set the parameters to our variables we created above. This will <code>return</code> a <code>bool</code> indicating if actors are within range of this actor. Here is Unreal's documentation on <a href=\"https://docs.unrealengine.com/latest/INT/API/Runtime/Engine/Engine/UWorld/SweepMultiByChannel/\">SweepMultiByChannel</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token class-name\">AAddRadialForce</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">BeginPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">Super</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">BeginPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// create tarray for hit results</span>\n\tTArray<span class=\"token operator\">&lt;</span>FHitResult<span class=\"token operator\">></span> OutHits<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// get actor locations</span>\n\tFVector MyLocation <span class=\"token operator\">=</span> <span class=\"token function\">GetActorLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\">// start and end locations. The sphere will create the radial sweep.</span>\n\tFVector Start <span class=\"token operator\">=</span> MyLocation<span class=\"token punctuation\">;</span>\n\tFVector End <span class=\"token operator\">=</span> MyLocation<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// create a collision sphere</span>\n\tFCollisionShape MyColSphere <span class=\"token operator\">=</span> <span class=\"token class-name\">FCollisionShape</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">MakeSphere</span><span class=\"token punctuation\">(</span><span class=\"token number\">500.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// draw collision sphere</span>\n\t<span class=\"token function\">DrawDebugSphere</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">GetActorLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> MyColSphere<span class=\"token punctuation\">.</span><span class=\"token function\">GetSphereRadius</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> FColor<span class=\"token double-colon punctuation\">::</span>Cyan<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\">// check if something got hit in the sweep</span>\n\t<span class=\"token keyword\">bool</span> isHit <span class=\"token operator\">=</span> <span class=\"token function\">GetWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">SweepMultiByChannel</span><span class=\"token punctuation\">(</span>OutHits<span class=\"token punctuation\">,</span> Start<span class=\"token punctuation\">,</span> End<span class=\"token punctuation\">,</span> FQuat<span class=\"token double-colon punctuation\">::</span>Identity<span class=\"token punctuation\">,</span> ECC_WorldStatic<span class=\"token punctuation\">,</span> MyColSphere<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If <code>isHit</code> is <code>true</code>, we will loop through the OutHits TArray and add radial impulse to each successful casted actor's root component. You can learn more about TArray for loops <a href=\"https://docs.unrealengine.com/latest/INT/Programming/UnrealArchitecture/TArrays/\">here</a>.</p>\n<h4>add hit actors to SweepActors.</h4>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isHit<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// loop through TArray</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> Hit <span class=\"token operator\">:</span> OutHits<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\tUStaticMeshComponent<span class=\"token operator\">*</span> MeshComp <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">Cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>UStaticMeshComponent<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Hit<span class=\"token punctuation\">.</span><span class=\"token function\">GetActor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">GetRootComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>MeshComp<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// alternivly you can use  ERadialImpulseFalloff::RIF_Linear for the impulse to get linearly weaker as it gets further from origin.</span>\n\t\t\t\t<span class=\"token comment\">// set the float radius to 500 and the float strength to 2000.</span>\n\t\t\t\tMeshComp<span class=\"token operator\">-></span><span class=\"token function\">AddRadialImpulse</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetActorLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500.f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000.f</span><span class=\"token punctuation\">,</span> ERadialImpulseFalloff<span class=\"token double-colon punctuation\">::</span>RIF_Constant<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Below is the full <code>.cpp</code> file.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"AddRadialForce.h\"</span></span>\n<span class=\"token comment\">// add debug helpfers</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"DrawDebugHelpers.h\"</span></span>\n\n<span class=\"token comment\">// Sets default values</span>\n<span class=\"token class-name\">AAddRadialForce</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">AAddRadialForce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n \t<span class=\"token comment\">// Set this actor to call Tick() every frame.  You can turn this off to improve performance if you don't need it.</span>\n\tPrimaryActorTick<span class=\"token punctuation\">.</span>bCanEverTick <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Called when the game starts or when spawned</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">AAddRadialForce</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">BeginPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">Super</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">BeginPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// create tarray for hit results</span>\n\tTArray<span class=\"token operator\">&lt;</span>FHitResult<span class=\"token operator\">></span> OutHits<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// get actor locations</span>\n\tFVector MyLocation <span class=\"token operator\">=</span> <span class=\"token function\">GetActorLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\">// start and end locations. The sphere will create the radial sweep.</span>\n\tFVector Start <span class=\"token operator\">=</span> MyLocation<span class=\"token punctuation\">;</span>\n\tFVector End <span class=\"token operator\">=</span> MyLocation<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// create a collision sphere</span>\n\tFCollisionShape MyColSphere <span class=\"token operator\">=</span> <span class=\"token class-name\">FCollisionShape</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">MakeSphere</span><span class=\"token punctuation\">(</span><span class=\"token number\">500.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// draw collision sphere</span>\n\t<span class=\"token function\">DrawDebugSphere</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">GetActorLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> MyColSphere<span class=\"token punctuation\">.</span><span class=\"token function\">GetSphereRadius</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> FColor<span class=\"token double-colon punctuation\">::</span>Cyan<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\">// check if something got hit in the sweep</span>\n\t<span class=\"token keyword\">bool</span> isHit <span class=\"token operator\">=</span> <span class=\"token function\">GetWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">SweepMultiByChannel</span><span class=\"token punctuation\">(</span>OutHits<span class=\"token punctuation\">,</span> Start<span class=\"token punctuation\">,</span> End<span class=\"token punctuation\">,</span> FQuat<span class=\"token double-colon punctuation\">::</span>Identity<span class=\"token punctuation\">,</span> ECC_WorldStatic<span class=\"token punctuation\">,</span> MyColSphere<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isHit<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// loop through TArray</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> Hit <span class=\"token operator\">:</span> OutHits<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\tUStaticMeshComponent<span class=\"token operator\">*</span> MeshComp <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">Cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>UStaticMeshComponent<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Hit<span class=\"token punctuation\">.</span><span class=\"token function\">GetActor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">GetRootComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>MeshComp<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token comment\">// alternivly you can use  ERadialImpulseFalloff::RIF_Linear for the impulse to get linearly weaker as it gets further from origin.</span>\n\t\t\t\t<span class=\"token comment\">// set the float radius to 500 and the float strength to 2000.</span>\n\t\t\t\tMeshComp<span class=\"token operator\">-></span><span class=\"token function\">AddRadialImpulse</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetActorLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500.f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000.f</span><span class=\"token punctuation\">,</span> ERadialImpulseFalloff<span class=\"token double-colon punctuation\">::</span>RIF_Constant<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Called every frame</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">AAddRadialForce</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Tick</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> DeltaTime<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">Super</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Tick</span><span class=\"token punctuation\">(</span>DeltaTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"Add Radial Impulse to Actor","date":"December 01, 2017","description":"Add impulse force to all actors that are within the set bounds.","image":"https://res.cloudinary.com/dz09rnbhe/image/upload/unrealcpp/add-radial-force_ceu8dz.jpg","tags":["intermediate","impulse","radial"],"video":"ifhJXUJ1E2s","uev":"4.18.3"}},"previous":{"fields":{"slug":"/actor-line-trace/"},"frontmatter":{"title":"Actor Line Trace"}},"next":{"fields":{"slug":"/on-overlap-begin/"},"frontmatter":{"title":"Character Overlap Events"}}},"pageContext":{"id":"deaeda94-fa76-5293-8f21-379da4645c28","previousPostId":"03fc56eb-efda-501c-8133-e80065dd72bf","nextPostId":"56791a34-e5d3-5703-b8ab-d7b52684f7df"}},"staticQueryHashes":[],"slicesMap":{}}