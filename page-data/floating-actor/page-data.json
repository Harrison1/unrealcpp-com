{"componentChunkName":"component---src-templates-blog-post-js","path":"/floating-actor/","result":{"data":{"site":{"siteMetadata":{"title":"Unreal C++"}},"markdownRemark":{"id":"f68baafd-f147-57eb-be7d-97eaf921f58c","excerpt":"Github Link: https://github.com/Harrison1/unrealcpp/tree/master/FloatingActor For this tutorial we are using the standard first person C++ template with starterâ€¦","html":"<p><strong>Github Link: <a href=\"https://github.com/Harrison1/unrealcpp/tree/master/FloatingActor\">https://github.com/Harrison1/unrealcpp/tree/master/FloatingActor</a></strong></p>\n<p><em>For this tutorial we are using the standard first person C++ template with starter content. If you don't know how to add a new actor class to your project, please visit the <a href=\"/add-actor-class\">Add C++ Actor Class</a> post.</em></p>\n<p>In this tutorial the main logic came from one of Epic's Unreal Engine 4 C++ tutorials,  you can find the link <a href=\"https://docs.unrealengine.com/latest/INT/Programming/QuickStart/index.html\">here</a>. Also, <a href=\"https://answers.unrealengine.com/questions/434890/unreal-engine-beginner-fmathsin.html\">here</a> is great forum discussing the code in greater depth. <a href=\"https://answers.unrealengine.com/users/3692/tim-lincoln.html\">Tim</a> is rockstar for providing a stellar answer.</p>\n<p>Create a new <code>C++</code> actor class and call it <strong>Floating Actor</strong>. In the header file will create four <code>float</code> variables. We will create <code>RunningTime</code>, <code>XValue</code>, <code>YValue</code>, and <code>ZValue</code> variables. Below is the final header code.</p>\n<h3>FloatingActor.h</h3>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"CoreMinimal.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"GameFramework/Actor.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"FloatingActor.generated.h\"</span></span>\n\n<span class=\"token function\">UCLASS</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UNREALCPP_API</span> AFloatingActor <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> AActor\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">GENERATED_BODY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\t\n\t<span class=\"token comment\">// Sets default values for this actor's properties</span>\n\t<span class=\"token function\">AFloatingActor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\">// Called when the game starts or when spawned</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">BeginPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">override</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\t\n\t<span class=\"token comment\">// Called every frame</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Tick</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> DeltaTime<span class=\"token punctuation\">)</span> <span class=\"token keyword\">override</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// declare our float variables </span>\n\t<span class=\"token keyword\">float</span> RunningTime<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>EditAnywhere<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> Movement<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">float</span> XValue<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>EditAnywhere<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> Movement<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">float</span> YValue<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>EditAnywhere<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> Movement<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">float</span> ZValue<span class=\"token punctuation\">;</span>\n\t\n\t\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Next, we will be putting all of our logic in our <code>Tick</code> function. To start off, let's declare a variable every frame that equals the actor's current location by using <code>GetActorLocation</code>. This will allow us to change the X,Y, and Z values of actor and move it on scene. For smooth motion we will be using the <code>FMath:Sin</code> to set our <code>DeltaHeight</code> variable.</p>\n<h4>DeltaHeight</h4>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">float</span> DeltaHeight <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">FMath</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Sin</span><span class=\"token punctuation\">(</span>RunningTime <span class=\"token operator\">+</span> DeltaTime<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token class-name\">FMath</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Sin</span><span class=\"token punctuation\">(</span>RunningTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Next, we are going get our actor's location X,Y, and Z coordinates and add <code>DeltaTIme * Value</code> to them. In the header file we made the variables editable anywhere so in the editor we can easily adjust the amount and direction the actor moves. Next, set <code>RunningTime</code> to <code>DeltaHeight</code>. Finally set the actor's location to the <code>NewLocation</code>. Below is the final <code>.cpp</code> final.</p>\n<h3>FloatingActor.cpp</h3>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"FloatingActor.h\"</span></span>\n\n\n<span class=\"token comment\">// Sets default values</span>\n<span class=\"token class-name\">AFloatingActor</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">AFloatingActor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n \t<span class=\"token comment\">// Set this actor to call Tick() every frame.  You can turn this off to improve performance if you don't need it.</span>\n\tPrimaryActorTick<span class=\"token punctuation\">.</span>bCanEverTick <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Called when the game starts or when spawned</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">AFloatingActor</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">BeginPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">Super</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">BeginPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Called every frame</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">AFloatingActor</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Tick</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> DeltaTime<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">Super</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Tick</span><span class=\"token punctuation\">(</span>DeltaTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// on every frame change location for a smooth floating actor</span>\n\tFVector NewLocation <span class=\"token operator\">=</span> <span class=\"token function\">GetActorLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> DeltaHeight <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">FMath</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Sin</span><span class=\"token punctuation\">(</span>RunningTime <span class=\"token operator\">+</span> DeltaTime<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token class-name\">FMath</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Sin</span><span class=\"token punctuation\">(</span>RunningTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tNewLocation<span class=\"token punctuation\">.</span>X <span class=\"token operator\">+=</span> DeltaHeight <span class=\"token operator\">*</span>  XValue<span class=\"token punctuation\">;</span>\n\tNewLocation<span class=\"token punctuation\">.</span>Y <span class=\"token operator\">+=</span> DeltaHeight <span class=\"token operator\">*</span>  YValue<span class=\"token punctuation\">;</span>\n\tNewLocation<span class=\"token punctuation\">.</span>Z <span class=\"token operator\">+=</span> DeltaHeight <span class=\"token operator\">*</span>  ZValue<span class=\"token punctuation\">;</span>\n\n\tRunningTime <span class=\"token operator\">+=</span> DeltaTime<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">SetActorLocation</span><span class=\"token punctuation\">(</span>NewLocation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"Floating Actor","date":"December 02, 2017","description":"How to make an actor float up and down. This is good for floating platforms or things that need to bob up and down.","image":"https://res.cloudinary.com/dz09rnbhe/image/upload/unrealcpp/floating-actor_mntqfm.jpg","tags":["intermediate","ue4 tutorial"],"video":"hv-F3BhP1dU","uev":"4.18.3"}},"previous":{"fields":{"slug":"/rotate-actor-around-player/"},"frontmatter":{"title":"Rotate Actor Around Player"}},"next":{"fields":{"slug":"/ue4-camera-director-tutorial/"},"frontmatter":{"title":"Unreal Engine 4 Camera Director Tutorial"}}},"pageContext":{"id":"f68baafd-f147-57eb-be7d-97eaf921f58c","previousPostId":"329b898e-6c37-51b1-85be-587a75b52757","nextPostId":"a20bf503-e6c3-51fa-b62c-1e967a97233c"}},"staticQueryHashes":[],"slicesMap":{}}