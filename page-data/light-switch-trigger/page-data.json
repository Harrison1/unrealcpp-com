{"componentChunkName":"component---src-templates-blog-post-js","path":"/light-switch-trigger/","result":{"data":{"site":{"siteMetadata":{"title":"Unreal C++"}},"markdownRemark":{"id":"bea55c59-6a61-5869-b2a0-1a2c48faaa07","excerpt":"Github Link: https://github.com/Harrison1/unrealcpp/tree/master/LightSwitchTrigger For this tutorial we are using the standard first person C++ template withâ€¦","html":"<p><strong>Github Link: <a href=\"https://github.com/Harrison1/unrealcpp/tree/master/LightSwitchTrigger\">https://github.com/Harrison1/unrealcpp/tree/master/LightSwitchTrigger</a></strong></p>\n<p><em>For this tutorial we are using the standard first person C++ template with starter content. If you don't know how to add a new actor class to your project, please visit the <a href=\"/add-actor-class\">Add C++ Actor Class</a> post.</em></p>\n<p>The main logic of this code is from Epic's Unreal Engine 4 documentation and you can see it <a href=\"https://docs.unrealengine.com/latest/INT/Gameplay/ClassCreation/CodeOnly/\">here</a>.</p>\n<p>In this tutorial we are going to make a light that turns on and off when a user enters the actor's USphereComponent. Create a new <code>C++</code> actor class and call it <strong>LightSwitchTrigger</strong>. In the header we will define our <code>PointLight</code>, <code>USphereComponent</code>, <code>Overlap</code> functions, and <code>ToggleLight</code> function.</p>\n<h4>LightSwitchTrigger.h</h4>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"CoreMinimal.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"GameFramework/Actor.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"LightSwitchTrigger.generated.h\"</span></span>\n\n<span class=\"token function\">UCLASS</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UNREALCPP_API</span> ALightSwitchTrigger <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> AActor\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">GENERATED_BODY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\t\n\t<span class=\"token comment\">// Sets default values for this actor's properties</span>\n\t<span class=\"token function\">ALightSwitchTrigger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\">// Called when the game starts or when spawned</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">BeginPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">override</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\t\n\t<span class=\"token comment\">// Called every frame</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Tick</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> DeltaTime<span class=\"token punctuation\">)</span> <span class=\"token keyword\">override</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// declare point light comp</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>VisibleAnywhere<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> <span class=\"token string\">\"Light Switch\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">UPointLightComponent</span><span class=\"token operator\">*</span> PointLight<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// declare sphere comp</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>VisibleAnywhere<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> <span class=\"token string\">\"Light Switch\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">USphereComponent</span><span class=\"token operator\">*</span> LightSphere<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// declare light intensity variable</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>VisibleAnywhere<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> <span class=\"token string\">\"Light Switch\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">float</span> LightIntensity<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\">// declare overlap begin function</span>\n\t<span class=\"token function\">UFUNCTION</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">OnOverlapBegin</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">UPrimitiveComponent</span><span class=\"token operator\">*</span> OverlappedComp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AActor</span><span class=\"token operator\">*</span> OtherActor<span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UPrimitiveComponent</span><span class=\"token operator\">*</span> OtherComp<span class=\"token punctuation\">,</span> int32 OtherBodyIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bFromSweep<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> FHitResult<span class=\"token operator\">&amp;</span> SweepResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// declare overlap end function</span>\n\t<span class=\"token function\">UFUNCTION</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">OnOverlapEnd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">UPrimitiveComponent</span><span class=\"token operator\">*</span> OverlappedComp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AActor</span><span class=\"token operator\">*</span> OtherActor<span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UPrimitiveComponent</span><span class=\"token operator\">*</span> OtherComp<span class=\"token punctuation\">,</span> int32 OtherBodyIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// declare ToggleLight function</span>\n\t<span class=\"token function\">UFUNCTION</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">ToggleLight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Next, in the <code>.cpp</code> we will <code>#include</code> <code>DrawDebuHelpers</code> to help us visualize the collision sphere.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"LightSwitchTrigger.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Components/PointLightComponent.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Components/SphereComponent.h\"</span></span>\n<span class=\"token comment\">// include draw debu helpers header file</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"DrawDebugHelpers.h\"</span></span></code></pre></div>\n<p>In the <code>LightSwitchTrigger</code> init function we will set our <code>LightIntensity</code> to <code>3000.0f</code>. Next, we'll add a <code>PointLight</code> as our <code>RootComponent</code>. Then we'll add a <code>USphereComponent</code> to our actor for a trigger sphere and attach it to the <code>RootComponent</code>. Then connect <code>USphereComponent</code> to our <code>Overlap</code> functions that we will create later.</p>\n<h4>setup up trigger light</h4>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token class-name\">ALightSwitchTrigger</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">ALightSwitchTrigger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n \t<span class=\"token comment\">// Set this actor to call Tick() every frame.  You can turn this off to improve performance if you don't need it.</span>\n\tPrimaryActorTick<span class=\"token punctuation\">.</span>bCanEverTick <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n\tLightIntensity <span class=\"token operator\">=</span> <span class=\"token number\">3000.0f</span><span class=\"token punctuation\">;</span>\n\n\tPointLight <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">CreateDefaultSubobject</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>UPointLightComponent<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Point Light\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tPointLight<span class=\"token operator\">-></span>Intensity <span class=\"token operator\">=</span> LightIntensity<span class=\"token punctuation\">;</span>\n\tPointLight<span class=\"token operator\">-></span>bVisible <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\tRootComponent <span class=\"token operator\">=</span> PointLight<span class=\"token punctuation\">;</span>\n\n\tLightSphere <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">CreateDefaultSubobject</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>USphereComponent<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Light Sphere Component\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tLightSphere<span class=\"token operator\">-></span><span class=\"token function\">InitSphereRadius</span><span class=\"token punctuation\">(</span><span class=\"token number\">300.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tLightSphere<span class=\"token operator\">-></span><span class=\"token function\">SetCollisionProfileName</span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Trigger\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tLightSphere<span class=\"token operator\">-></span><span class=\"token function\">SetupAttachment</span><span class=\"token punctuation\">(</span>RootComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tLightSphere<span class=\"token operator\">-></span>OnComponentBeginOverlap<span class=\"token punctuation\">.</span><span class=\"token function\">AddDynamic</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ALightSwitchTrigger<span class=\"token double-colon punctuation\">::</span>OnOverlapBegin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tLightSphere<span class=\"token operator\">-></span>OnComponentEndOverlap<span class=\"token punctuation\">.</span><span class=\"token function\">AddDynamic</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ALightSwitchTrigger<span class=\"token double-colon punctuation\">::</span>OnOverlapEnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In the <code>BeginPlay()</code> add a debug sphere with the same radius as our <code>LightSphere</code>.</p>\n<h4>draw debug sphere</h4>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token class-name\">ALightSwitchTrigger</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">BeginPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">Super</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">BeginPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">DrawDebugSphere</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">GetActorLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300.f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> FColor<span class=\"token double-colon punctuation\">::</span>Green<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Create a function called <code>ToggleLight()</code> that toggles the <code>PointLight's</code> visibility. Visit <a href=\"https://docs.unrealengine.com/latest/INT/API/Runtime/Engine/Components/USceneComponent/index.html\">this page</a> in the documentation to view all of the <code>USceneComponent</code>'s functions and properties.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token class-name\">ALightSwitchTrigger</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">ToggleLight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    PointLight<span class=\"token operator\">-></span><span class=\"token function\">ToggleVisibility</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Next, we'll create two overlap functions that both call the <code>ToggleLight</code> function to toggle the visibility of the light.</p>\n<h4>overlap functions</h4>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token class-name\">ALightSwitchTrigger</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnOverlapBegin</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">UPrimitiveComponent</span><span class=\"token operator\">*</span> OverlappedComp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AActor</span><span class=\"token operator\">*</span> OtherActor<span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UPrimitiveComponent</span><span class=\"token operator\">*</span> OtherComp<span class=\"token punctuation\">,</span> int32 OtherBodyIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bFromSweep<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> FHitResult<span class=\"token operator\">&amp;</span> SweepResult<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>OtherActor <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>OtherActor <span class=\"token operator\">!=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> OtherComp<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">ToggleLight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">ALightSwitchTrigger</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnOverlapEnd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">UPrimitiveComponent</span><span class=\"token operator\">*</span> OverlappedComp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AActor</span><span class=\"token operator\">*</span> OtherActor<span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UPrimitiveComponent</span><span class=\"token operator\">*</span> OtherComp<span class=\"token punctuation\">,</span> int32 OtherBodyIndex<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>OtherActor <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>OtherActor <span class=\"token operator\">!=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> OtherComp<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">ToggleLight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Finally, compile the code and drag the <code>LightSwitchTrigger</code> into the scene. Now whenever the player enters the sphere comp the light will toggle. Below is the final <code>.cpp</code> file.</p>\n<h3>LightSwitchTrigger.cpp</h3>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"LightSwitchTrigger.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Components/PointLightComponent.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Components/SphereComponent.h\"</span></span>\n<span class=\"token comment\">// include draw debu helpers header file</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"DrawDebugHelpers.h\"</span></span>\n\n<span class=\"token comment\">// Sets default values</span>\n<span class=\"token class-name\">ALightSwitchTrigger</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">ALightSwitchTrigger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n \t<span class=\"token comment\">// Set this actor to call Tick() every frame.  You can turn this off to improve performance if you don't need it.</span>\n\tPrimaryActorTick<span class=\"token punctuation\">.</span>bCanEverTick <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n\tLightIntensity <span class=\"token operator\">=</span> <span class=\"token number\">3000.0f</span><span class=\"token punctuation\">;</span>\n\n\tPointLight <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">CreateDefaultSubobject</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>UPointLightComponent<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Point Light\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tPointLight<span class=\"token operator\">-></span>Intensity <span class=\"token operator\">=</span> LightIntensity<span class=\"token punctuation\">;</span>\n\tPointLight<span class=\"token operator\">-></span>bVisible <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\tRootComponent <span class=\"token operator\">=</span> PointLight<span class=\"token punctuation\">;</span>\n\n\tLightSphere <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">CreateDefaultSubobject</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>USphereComponent<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Light Sphere Component\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tLightSphere<span class=\"token operator\">-></span><span class=\"token function\">InitSphereRadius</span><span class=\"token punctuation\">(</span><span class=\"token number\">300.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tLightSphere<span class=\"token operator\">-></span><span class=\"token function\">SetCollisionProfileName</span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Trigger\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tLightSphere<span class=\"token operator\">-></span><span class=\"token function\">SetupAttachment</span><span class=\"token punctuation\">(</span>RootComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tLightSphere<span class=\"token operator\">-></span>OnComponentBeginOverlap<span class=\"token punctuation\">.</span><span class=\"token function\">AddDynamic</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ALightSwitchTrigger<span class=\"token double-colon punctuation\">::</span>OnOverlapBegin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tLightSphere<span class=\"token operator\">-></span>OnComponentEndOverlap<span class=\"token punctuation\">.</span><span class=\"token function\">AddDynamic</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ALightSwitchTrigger<span class=\"token double-colon punctuation\">::</span>OnOverlapEnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Called when the game starts or when spawned</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">ALightSwitchTrigger</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">BeginPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">Super</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">BeginPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">DrawDebugSphere</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">GetActorLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300.f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> FColor<span class=\"token double-colon punctuation\">::</span>Green<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Called every frame</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">ALightSwitchTrigger</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Tick</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> DeltaTime<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">Super</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Tick</span><span class=\"token punctuation\">(</span>DeltaTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">ALightSwitchTrigger</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnOverlapBegin</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">UPrimitiveComponent</span><span class=\"token operator\">*</span> OverlappedComp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AActor</span><span class=\"token operator\">*</span> OtherActor<span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UPrimitiveComponent</span><span class=\"token operator\">*</span> OtherComp<span class=\"token punctuation\">,</span> int32 OtherBodyIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bFromSweep<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> FHitResult<span class=\"token operator\">&amp;</span> SweepResult<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>OtherActor <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>OtherActor <span class=\"token operator\">!=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> OtherComp<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">ToggleLight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">ALightSwitchTrigger</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnOverlapEnd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">UPrimitiveComponent</span><span class=\"token operator\">*</span> OverlappedComp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AActor</span><span class=\"token operator\">*</span> OtherActor<span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UPrimitiveComponent</span><span class=\"token operator\">*</span> OtherComp<span class=\"token punctuation\">,</span> int32 OtherBodyIndex<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>OtherActor <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>OtherActor <span class=\"token operator\">!=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> OtherComp<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">ToggleLight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">ALightSwitchTrigger</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">ToggleLight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    PointLight<span class=\"token operator\">-></span><span class=\"token function\">ToggleVisibility</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"Light Switch Overlap Trigger","date":"December 02, 2017","description":"Create a light that turns on and off when a user enters the actor's USphereComponent","image":"https://res.cloudinary.com/dz09rnbhe/image/upload/unrealcpp/light-switch-overlap_tkekfo.jpg","tags":["beginner","light","ue4 tutorial"],"video":"LACvuJgQU5c","uev":"4.18.3"}},"previous":{"fields":{"slug":"/trigger-volume-specific-actor/"},"frontmatter":{"title":"Trigger Volume With Specific Actor"}},"next":{"fields":{"slug":"/character-bind-button/"},"frontmatter":{"title":"Bind Button to Character"}}},"pageContext":{"id":"bea55c59-6a61-5869-b2a0-1a2c48faaa07","previousPostId":"57b57103-228f-50a7-9785-30db3a2dfb1d","nextPostId":"162e7ebf-8166-58f8-8216-1c857bc97d10"}},"staticQueryHashes":[],"slicesMap":{}}