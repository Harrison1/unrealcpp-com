{"componentChunkName":"component---src-templates-blog-post-js","path":"/receive-player-input/","result":{"data":{"site":{"siteMetadata":{"title":"Unreal C++"}},"markdownRemark":{"id":"0f6adfe9-e7e8-5150-84c8-fbd2883c4fbe","excerpt":"Github Link: https://github.com/Harrison1/unrealcpp/tree/master/MyPawn For this tutorial we are using the standard first person C++ template with starterâ€¦","html":"<p><strong>Github Link: <a href=\"https://github.com/Harrison1/unrealcpp/tree/master/MyPawn\">https://github.com/Harrison1/unrealcpp/tree/master/MyPawn</a></strong></p>\n<p><em>For this tutorial we are using the standard first person C++ template with starter content. If you don't know how to add a new actor class to your project, please visit the <a href=\"/add-actor-class\">Add C++ Actor Class</a> post.</em></p>\n<p>The main logic of this code is from Epic's Unreal Engine 4 documentation's tutorial titled <strong>Player Input and Pawns</strong> and you can see the full tutorial <a href=\"https://docs.unrealengine.com/latest/INT/Programming/Tutorials/PlayerInput/index.html\">here</a>.</p>\n<p>In this example we will add inputs to a pawn and move it around our game. Create a new <code>C++</code> actor class and call it <strong>MyPawn</strong>. In the header file we'll create variables for our 'Axis' movements, functions, and <code>bool</code>. Below is the final header code.</p>\n<h3>MyPawn.h</h3>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"CoreMinimal.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"GameFramework/Pawn.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"MyPawn.generated.h\"</span></span>\n\n<span class=\"token function\">UCLASS</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UNREALCPP_API</span> AMyPawn <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> APawn\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">GENERATED_BODY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\">// Sets default values for this pawn's properties</span>\n\t<span class=\"token function\">AMyPawn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\">// Called when the game starts or when spawned</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">BeginPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">override</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\">// Called every frame</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Tick</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> DeltaSeconds<span class=\"token punctuation\">)</span> <span class=\"token keyword\">override</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Called to bind functionality to input</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SetupPlayerInputComponent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">UInputComponent</span><span class=\"token operator\">*</span> InputComponent<span class=\"token punctuation\">)</span> <span class=\"token keyword\">override</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>EditAnywhere<span class=\"token punctuation\">)</span>\n    USceneComponent<span class=\"token operator\">*</span> OurVisibleComponent<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Input functions</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">Move_XAxis</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> AxisValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">Move_YAxis</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> AxisValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">StartGrowing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">StopGrowing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Input variables</span>\n    FVector CurrentVelocity<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span> bGrowing<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In editor let's create an <code>Action</code> mapping called <strong>Grow</strong> and bind it to the <code>G</code> key. Then make two <code>Axis</code> mappings and call them <code>MoveX</code> and <code>MoveY</code>. Set the axis scales to 1 and -1 respectively.</p>\n<p>// TODO get images and scales</p>\n<h4>project settings</h4>\n<p><a href=\"https://res.cloudinary.com/dz09rnbhe/image/upload/unrealcpp/pawn-project-settings_scb9ke.jpg\"><img src=\"https://res.cloudinary.com/dz09rnbhe/image/upload/unrealcpp/pawn-project-settings_scb9ke.jpg\" alt=\"project settings\" title=\"project settings\"></a></p>\n<h4>add inputs</h4>\n<p><a href=\"https://res.cloudinary.com/dz09rnbhe/image/upload/unrealcpp/pawn-movement-input_uejdk8.png\"><img src=\"https://res.cloudinary.com/dz09rnbhe/image/upload/unrealcpp/pawn-movement-input_uejdk8.png\" alt=\"new pawn movement comp\" title=\"new pawn movement comp\"></a></p>\n<ol>\n<li>\n<p><code>MoveX</code><br>\nI: <em>Scale</em> 1.0<br>\nK: <em>Scale</em> -1.0</p>\n</li>\n<li>\n<p><code>MoveY</code><br>\nJ: <em>Scale</em> -1.0<br>\nL: <em>Scale</em> 1.0</p>\n</li>\n<li>\n<p><code>Grow</code><br>\nG</p>\n</li>\n</ol>\n<p>In the <code>.cpp</code> file make sure to <code>#include</code> <code>Camera/CameraComponent.h</code>, <code>Components/InputComponent.h</code>, and <code>Components/StaticMeshComponent.h</code>.</p>\n<h4>include files</h4>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"MyPawn.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Camera/CameraComponent.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Components/InputComponent.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Components/StaticMeshComponent.h\"</span></span></code></pre></div>\n<p>Next, we'll set the default values. First, we want automatically possess the player by doing <code>AutoPossessPlayer = EAutoReceiveInput::Player0;</code>. Next we create and add a visual component and camera to our dummy <code>RootComponent</code>.</p>\n<h4>set default values</h4>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// Sets default values</span>\n<span class=\"token class-name\">AMyPawn</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">AMyPawn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Set this pawn to call Tick() every frame.  You can turn this off to improve performance if you don't need it.</span>\n    PrimaryActorTick<span class=\"token punctuation\">.</span>bCanEverTick <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Set this pawn to be controlled by the lowest-numbered player</span>\n    AutoPossessPlayer <span class=\"token operator\">=</span> EAutoReceiveInput<span class=\"token double-colon punctuation\">::</span>Player0<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Create a dummy root component we can attach things to.</span>\n    RootComponent <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">CreateDefaultSubobject</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>USceneComponent<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"RootComponent\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Create a camera and a visible object</span>\n    UCameraComponent<span class=\"token operator\">*</span> OurCamera <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">CreateDefaultSubobject</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>UCameraComponent<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OurCamera\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    OurVisibleComponent <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">CreateDefaultSubobject</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>UStaticMeshComponent<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OurVisibleComponent\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Attach our camera and visible object to our root component. Offset and rotate the camera.</span>\n    OurCamera<span class=\"token operator\">-></span><span class=\"token function\">SetupAttachment</span><span class=\"token punctuation\">(</span>RootComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    OurCamera<span class=\"token operator\">-></span><span class=\"token function\">SetRelativeLocation</span><span class=\"token punctuation\">(</span><span class=\"token function\">FVector</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">250.0f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">250.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    OurCamera<span class=\"token operator\">-></span><span class=\"token function\">SetRelativeRotation</span><span class=\"token punctuation\">(</span><span class=\"token function\">FRotator</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">45.0f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    OurVisibleComponent<span class=\"token operator\">-></span><span class=\"token function\">SetupAttachment</span><span class=\"token punctuation\">(</span>RootComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In the <code>Tick</code> function we'll want to always check the state of growing for the pawn and always position the pawn correctly. Every frame we get the <code>VisualComponent</code>'s scale and if the player is pressing <code>G</code> we will add <code>DeltaTime</code> to the scale. When the key is not pressed, the scale will shrink back to normal size all while clamping it's size so it doesn't go above 2 (double the size) or below 1 (initial size).</p>\n<h4>Tick function</h4>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// Called every frame</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">AMyPawn</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Tick</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> DeltaTime<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">Super</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Tick</span><span class=\"token punctuation\">(</span>DeltaTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\n    <span class=\"token comment\">// Handle growing and shrinking based on our \"Grow\" action</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">float</span> CurrentScale <span class=\"token operator\">=</span> OurVisibleComponent<span class=\"token operator\">-></span><span class=\"token function\">GetComponentScale</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>X<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bGrowing<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Grow to double size over the course of one second</span>\n            CurrentScale <span class=\"token operator\">+=</span> DeltaTime<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Shrink half as fast as we grow</span>\n            CurrentScale <span class=\"token operator\">-=</span> <span class=\"token punctuation\">(</span>DeltaTime <span class=\"token operator\">*</span> <span class=\"token number\">0.5f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// Make sure we never drop below our starting size, or increase past double size.</span>\n        CurrentScale <span class=\"token operator\">=</span> <span class=\"token class-name\">FMath</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Clamp</span><span class=\"token punctuation\">(</span>CurrentScale<span class=\"token punctuation\">,</span> <span class=\"token number\">1.0f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        OurVisibleComponent<span class=\"token operator\">-></span><span class=\"token function\">SetWorldScale3D</span><span class=\"token punctuation\">(</span><span class=\"token function\">FVector</span><span class=\"token punctuation\">(</span>CurrentScale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Handle movement based on our \"MoveX\" and \"MoveY\" axes</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>CurrentVelocity<span class=\"token punctuation\">.</span><span class=\"token function\">IsZero</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            FVector NewLocation <span class=\"token operator\">=</span> <span class=\"token function\">GetActorLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>CurrentVelocity <span class=\"token operator\">*</span> DeltaTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">SetActorLocation</span><span class=\"token punctuation\">(</span>NewLocation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now, let's bind our actions and axes to our functions. We'll create the functions in the next steps.</p>\n<h4>Bind Input</h4>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// Called to bind functionality to input</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">AMyPawn</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">SetupPlayerInputComponent</span><span class=\"token punctuation\">(</span>UInputComponent<span class=\"token operator\">*</span> PlayerInputComponent<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">Super</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">SetupPlayerInputComponent</span><span class=\"token punctuation\">(</span>InputComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Respond when our \"Grow\" key is pressed or released.</span>\n    InputComponent<span class=\"token operator\">-></span><span class=\"token function\">BindAction</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Grow\"</span><span class=\"token punctuation\">,</span> IE_Pressed<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>AMyPawn<span class=\"token double-colon punctuation\">::</span>StartGrowing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    InputComponent<span class=\"token operator\">-></span><span class=\"token function\">BindAction</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Grow\"</span><span class=\"token punctuation\">,</span> IE_Released<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>AMyPawn<span class=\"token double-colon punctuation\">::</span>StopGrowing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Respond every frame to the values of our two movement axes, \"MoveX\" and \"MoveY\".</span>\n    InputComponent<span class=\"token operator\">-></span><span class=\"token function\">BindAxis</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MoveX\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>AMyPawn<span class=\"token double-colon punctuation\">::</span>Move_XAxis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    InputComponent<span class=\"token operator\">-></span><span class=\"token function\">BindAxis</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MoveY\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>AMyPawn<span class=\"token double-colon punctuation\">::</span>Move_YAxis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Create two axis functions that will handle moving our Pawn. These functions will clamp movement between 1 and -1 and move us at a rate of 100 unreal units.</p>\n<h4>axis functions</h4>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token class-name\">AMyPawn</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Move_XAxis</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> AxisValue<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Move at 100 units per second forward or backward</span>\n    CurrentVelocity<span class=\"token punctuation\">.</span>X <span class=\"token operator\">=</span> <span class=\"token class-name\">FMath</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Clamp</span><span class=\"token punctuation\">(</span>AxisValue<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1.0f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0f</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100.0f</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">AMyPawn</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Move_YAxis</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> AxisValue<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Move at 100 units per second right or left</span>\n    CurrentVelocity<span class=\"token punctuation\">.</span>Y <span class=\"token operator\">=</span> <span class=\"token class-name\">FMath</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Clamp</span><span class=\"token punctuation\">(</span>AxisValue<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1.0f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0f</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100.0f</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Next, we'll create two functions that simply toggle our <code>bGrowing</code> bool.</p>\n<h4>growing functions</h4>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token class-name\">AMyPawn</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">StartGrowing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    bGrowing <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">AMyPawn</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">StopGrowing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    bGrowing <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Compile the code. And now drag and drop your newly created pawn into your game and start moving it around.</p>","frontmatter":{"title":"Receive Player Input","date":"December 03, 2017","description":"Learn how to add input to a pawn and move it around the scene.","image":"https://res.cloudinary.com/dz09rnbhe/image/upload/unrealcpp/moving-pawn_vstq9s.jpg","tags":["intermediate","input"],"video":"vQsOIGWRdXQ","uev":"4.18.3"}},"previous":{"fields":{"slug":"/ue4-camera-director-tutorial/"},"frontmatter":{"title":"Unreal Engine 4 Camera Director Tutorial"}},"next":{"fields":{"slug":"/colliding-pawn/"},"frontmatter":{"title":"Colliding Pawn UE4 Tutorial"}}},"pageContext":{"id":"0f6adfe9-e7e8-5150-84c8-fbd2883c4fbe","previousPostId":"a20bf503-e6c3-51fa-b62c-1e967a97233c","nextPostId":"e197b0c4-5729-575d-b820-17be7d9e0318"}},"staticQueryHashes":[],"slicesMap":{}}